[pytest]
;pytest运行器参数设置


;测试用例地址
testpaths = ./testcases/

;生成allure报告配置
;测试结果json暂存地址
; addopts = --alluredir=./temp/html
    #失败重跑次数
;     --reruns 2
;    --allure-epics
;    --allure-features
;    --allure-stories
;    --allure-environment=<path-to-environment-properties-file>

;超过30s用例自动失败
;timeout = 30

;对用例进行分组
;markers =
;    smoking :
;    high    :
;    medium  :



;pytest相关参数：以下也可通过pytest.ini配置
;     --reruns: 失败重跑次数
;     --reruns-delay 失败重跑间隔时间
;     --count: 重复执行次数
;    -v: 显示错误位置以及错误的详细信息
;    -s: 等价于 pytest --capture=no 可以捕获print函数的输出
;    -q: 简化输出信息
;    -m: 运行指定标签的测试用例
;    -x: 一旦错误，则停止运行
;    --maxfail: 设置最大失败次数，当超出这个阈值时，则不会在执行测试用例
;    "--reruns=3", "--reruns-delay=2"
;    -s：这个选项表示关闭捕获输出，即将输出打印到控制台而不是被 pytest 截获。这在调试测试时很有用，因为可以直接查看打印的输出。
;
;    --cache-clear：这个选项表示在运行测试之前清除 pytest 的缓存。缓存包括已运行的测试结果等信息，此选项可用于确保重新执行所有测试。
;
;    --capture=sys：这个选项表示将捕获标准输出和标准错误输出，并将其显示在 pytest 的测试报告中。
;
;    --self-contained-html：这个选项表示生成一个独立的 HTML 格式的测试报告文件，其中包含了所有的样式和资源文件。这样，您可以将该文件单独保存，在没有其他依赖的情况下查看测试结果。
;
;    --reruns=0：这个选项表示在测试失败的情况下不重新运行测试。如果设置为正整数，例如 --reruns=3，会在测试失败时重新运行测试最多 3 次。
;
;    --reruns-delay=5：这个选项表示重新运行测试的延迟时间，单位为秒。默认情况下，如果使用了 --reruns 选项，pytest 会立即重新执行失败的测试。如果指定了 --reruns-delay，pytest 在重新运行之前会等待指定的延迟时间。
;
;    -p no:faulthandler 是 pytest 的命令行选项之一，用于禁用 pytest 插件 faulthandler。
;
;    faulthandler 是一个 pytest 插件，它用于跟踪和报告 Python 进程中的崩溃和异常情况。它可以在程序遇到严重错误时打印堆栈跟踪信息，并提供一些诊断功能。
;
;    使用 -p no:faulthandler 选项可以禁用 faulthandler 插件的加载和运行。这意味着 pytest 将不会使用该插件来处理和报告崩溃和异常情况。如果您确定不需要 faulthandler 插件的功能，或者遇到与其加载有关的问题，可以使用这个选项来禁用它。
;
;    请注意，-p no:faulthandler 选项只会禁用 faulthandler 插件，其他可能存在的插件仍然会正常加载和运行。如果您想禁用所有插件，可以使用 -p no:all 选项。
;
; allure相关参数：
;    –-alluredir这个选项用于指定存储测试结果的路径
;
;-m标记：
;    在pytest中，如果需要为-m参数传递多个值，可以使用以下方式：
;
;    pytest -m "value1 and value2"
;    这里使用双引号将多个值括起来，并使用and关键字连接它们。这将告诉pytest只运行标记为value1和value2的测试。
;
;    如果你想要运行标记为value1或value2的测试，可以使用or关键字：
;
;    pytest -m "value1 or value2"
;    你还可以使用not关键字来排除某个标记。例如，下面的命令将运行除了标记为value1的所有其他测试：
;
;    pytest -m "not value1"
;    这样，你就可以根据需要在pytest中使用-m参数传递多个值，并根据标记运行相应的测试。
;
