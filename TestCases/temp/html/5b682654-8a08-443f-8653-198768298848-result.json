{"name": "test_baidu", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: disconnected: unable to send message to renderer\n  (failed to check if window was closed: disconnected: not connected to DevTools)\n  (Session info: chrome=113.0.5672.127)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x010D8893+48451]\n\t(No symbol) [0x0106B8A1]\n\t(No symbol) [0x00F75058]\n\t(No symbol) [0x00F66F40]\n\t(No symbol) [0x00F675CA]\n\t(No symbol) [0x00F76F11]\n\t(No symbol) [0x00F774BF]\n\t(No symbol) [0x00F79631]\n\t(No symbol) [0x00F796D0]\n\t(No symbol) [0x00FA00C0]\n\t(No symbol) [0x00FA069B]\n\t(No symbol) [0x00FCDD92]\n\t(No symbol) [0x00FBA304]\n\t(No symbol) [0x00FCC482]\n\t(No symbol) [0x00FBA0B6]\n\t(No symbol) [0x00F97E08]\n\t(No symbol) [0x00F98F2D]\n\tGetHandleVerifier [0x01338E3A+2540266]\n\tGetHandleVerifier [0x01378959+2801161]\n\tGetHandleVerifier [0x0137295C+2776588]\n\tGetHandleVerifier [0x01162280+612144]\n\t(No symbol) [0x01074F6C]\n\t(No symbol) [0x010711D8]\n\t(No symbol) [0x010712BB]\n\t(No symbol) [0x01064857]\n\tBaseThreadInitThunk [0x761C7D59+25]\n\tRtlInitializeExceptionChain [0x775AB74B+107]\n\tRtlClearBits [0x775AB6CF+191]", "trace": "self = <TestCases.test_baidu.Testbaidu object at 0x0000024319DC5D80>\n\n    def test_baidu(self):\n        \"'测试百度输入'\"\n        self.baidu_page.open()\n        self.driver.maximize_window()\n        time.sleep(5)    #强制等待\n        self.driver.implicitly_wait(5)  #隐式等待\n>       self.baidu_page.search('测试水是生是死')\n\ntest_baidu.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\page\\PageObject\\BaiduPage.py:27: in search\n    self.driver.find_element(*self.sousuokuang).send_keys(input_text)  #将字符输入到搜索框\nE:\\python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:831: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nE:\\python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000024319DC5690>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"disconnected\",\"message\":\"disconnected: unable to send message to renderer...dInitThunk [0x761C7D59+25]\\\\n\\\\tRtlInitializeExceptionChain [0x775AB74B+107]\\\\n\\\\tRtlClearBits [0x775AB6CF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: disconnected: unable to send message to renderer\nE         (failed to check if window was closed: disconnected: not connected to DevTools)\nE         (Session info: chrome=113.0.5672.127)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x010D8893+48451]\nE       \t(No symbol) [0x0106B8A1]\nE       \t(No symbol) [0x00F75058]\nE       \t(No symbol) [0x00F66F40]\nE       \t(No symbol) [0x00F675CA]\nE       \t(No symbol) [0x00F76F11]\nE       \t(No symbol) [0x00F774BF]\nE       \t(No symbol) [0x00F79631]\nE       \t(No symbol) [0x00F796D0]\nE       \t(No symbol) [0x00FA00C0]\nE       \t(No symbol) [0x00FA069B]\nE       \t(No symbol) [0x00FCDD92]\nE       \t(No symbol) [0x00FBA304]\nE       \t(No symbol) [0x00FCC482]\nE       \t(No symbol) [0x00FBA0B6]\nE       \t(No symbol) [0x00F97E08]\nE       \t(No symbol) [0x00F98F2D]\nE       \tGetHandleVerifier [0x01338E3A+2540266]\nE       \tGetHandleVerifier [0x01378959+2801161]\nE       \tGetHandleVerifier [0x0137295C+2776588]\nE       \tGetHandleVerifier [0x01162280+612144]\nE       \t(No symbol) [0x01074F6C]\nE       \t(No symbol) [0x010711D8]\nE       \t(No symbol) [0x010712BB]\nE       \t(No symbol) [0x01064857]\nE       \tBaseThreadInitThunk [0x761C7D59+25]\nE       \tRtlInitializeExceptionChain [0x775AB74B+107]\nE       \tRtlClearBits [0x775AB6CF+191]\n\nE:\\python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: WebDriverException"}, "description": "'测试百度输入'", "start": 1686154586440, "stop": 1686154594262, "uuid": "ccabada5-9c31-4695-a47c-8bad51537e04", "historyId": "ebd507652e4e28f9809fb98146a295ba", "testCaseId": "ebd507652e4e28f9809fb98146a295ba", "fullName": "TestCases.test_baidu.Testbaidu#test_baidu", "labels": [{"name": "parentSuite", "value": "TestCases"}, {"name": "suite", "value": "test_baidu"}, {"name": "subSuite", "value": "Testbaidu"}, {"name": "host", "value": "DESKTOP-2BK3DCT"}, {"name": "thread", "value": "2396-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.test_baidu"}]}